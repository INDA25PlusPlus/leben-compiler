// bnf style used:
// comments: // comment
// terminal: "terminal"
// escaped characters: "\n\r\t\\"
// items: <item-name>
// rule: <item> ::= <other-item>
// grouping: ( <item> )
// optional: <item>?
// multiple: <item>+
// any number: <item>*
// alternatives: <item> | <item>
// starting node is <module>:

<module> ::= <ws> ( <global-declaration> <ws> )*

<global-declaration> ::= <comment>
                       | <module-declaration>
                       | <static-declaration>
                       | <method-declaration>
                       | <function-declaration>
                       | <struct-declaration>

<comment> ::= "#" <non-newline-char>* <newline-char>

<module-declaration> ::= "module" <fws> <module-name> <ws> "{" <module> "}"

<module-name> ::= <identifier-path>



<static-declaration> ::= <visibility-specifier> "static" <fws> <variable-declaration> <ws> ";"



<method-declaration> ::= <visibility-specifier> "method" <fws> <method-name> <ws>
                         "(" <ws> <method-parameter-list> ")" <ws>
                         <function-return-type-and-body>

<method-name> ::= <type-name> "." <function-name>

<method-parameter-list> ::= "this" <ws> ( "," <ws> <function-parameter> <ws> )* ( "," <ws> )?




<function-declaration> ::= <visibility-specifier> "function" <fws> <function-name> <ws>
                           "(" <ws> <function-parameter-list>? ")" <ws>
                           <function-return-type-and-body>

<function-parameter-list> ::= <function-parameter> <ws> ( "," <ws> <function-parameter> <ws> )* ( "," <ws> )?

<function-parameter> ::= <function-parameter-name> <ws> ":" <ws> <type-reference>

<function-name> ::= <identifier>

<function-parameter-name> ::= <identifier>

<function-return-type-and-body> ::= ( ":" <ws> <type-reference> <fws> )? <compound-statement>



<struct-declaration> ::= <visibility-specifier> "struct" <ws> <type-name> <fws>
                         "{" <ws> <struct-member-list>? "}"

<struct-member-list> ::= ( <struct-member> <ws> "," )* <struct-member> ( <ws> "," )? <ws>

<struct-member> ::= <struct-member-name> <ws> ":" <ws> <type-reference>

<struct-member-name> ::= <identifier>



<statement> ::= <compound-statement>
              | <if-statement>
              | <loop-statement>
              | <return-statement> <ws> <statement-separator>
              | <break-statement> <ws> <statement-separator>
              | <variable-declaration-statement> <ws> <statement-separator>
              | <assignment-statement> <ws> <statement-separator>
              | <expression-statement> <ws> <statement-separator>

<statement-separator> ::= ";"

<compound-statement> ::= "{" <ws> ( <statement> <ws> )* "}"



<if-statement> ::= "if" <if-clause>
                   ( <fws> "else if" <if-clause> )*
                   ( <fws> "else" <fws> <compound-statement> )?

<if-clause> ::= <fws> <expression> <fws> <compound-statement>



<loop-statement> ::= "loop" <fws> <expression> <ws> <compound-statement>



<return-statement> ::= "return" <fws> <expression>



<break-statement> ::= "break"

<variable-declaration-statement> ::= "let" <fws> <variable-declaration> <ws> ";"



<assignment-statement> ::= <prefix-assignee-expression> <ws> "=" <ws> <expression>
                         | <prefix-assignee-expression> <ws> "or=" <ws> <expression>
                         | <prefix-assignee-expression> <ws> "xor=" <ws> <expression>
                         | <prefix-assignee-expression> <ws> "and=" <ws> <expression>
                         | <prefix-assignee-expression> <ws> "+=" <ws> <expression>
                         | <prefix-assignee-expression> <ws> "-=" <ws> <expression>
                         | <prefix-assignee-expression> <ws> "*=" <ws> <expression>
                         | <prefix-assignee-expression> <ws> "/=" <ws> <expression>

<prefix-assignee-expression> ::= <postfix-assignee-expression>
                               | "*" <ws> <prefix-assignee-expression>

<postfix-assignee-expression> ::= <inner-assignee-expression>
                                | <postfix-assignee-expression> <ws> "[" <ws> <expression> "]"
                                | <postfix-assignee-expression> "." <identifier-path>

<inner-assignee-expression> ::= <variable-reference>



<expression-statement> ::= <expression>



<expression> ::= <or-expression> <ws>

<or-expression> ::= <xor-expression>
                  | <or-expression> <fws> "or" <fws> <xor-expression>

<xor-expression> ::= <and-expression>
                   | <xor-expression> <fws> "xor" <fws> <and-expression>

<and-expression> ::= <equality-expression>
                   | <and-expression> <fws> "and" <fws> <equality-expression>

<equality-expression> ::= <comparison-expression>
                        | <equality-expression> <ws> "==" <ws> <comparison-expression>
                        | <equality-expression> <ws> "!=" <ws> <comparison-expression>

<comparison-expression> ::= <additive-expression>
                          | <comparison-expression> <ws> "<" <ws> <additive-expression>
                          | <comparison-expression> <ws> ">" <ws> <additive-expression>
                          | <comparison-expression> <ws> "<=" <ws> <additive-expression>
                          | <comparison-expression> <ws> ">=" <ws> <additive-expression>

<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> <ws> "+" <ws> <multiplicative-expression>
                        | <additive-expression> <ws> "-" <ws> <multiplicative-expression>

<multiplicative-expression> ::= <prefix-expression>
                              | <multiplicative-expression> <ws> "*" <ws> <prefix-expression>
                              | <multiplicative-expression> <ws> "/" <ws> <prefix-expression>

<prefix-expression> ::= <postfix-expression>
                      | "&" <ws> <prefix-expression>
                      | "*" <ws> <prefix-expression>
                      | "-" <ws> <prefix-expression>
                      | "~" <ws> <prefix-expression>
                      | "!" <ws> <prefix-expression>

<postfix-expression> ::= <inner-expression>
                       | <postfix-expression> <ws> "[" <ws> <expression> "]"
                       | <postfix-expression> <ws> "(" <ws> <function-argument-list>? ")"
                       | <postfix-expression> "." <identifier-path>



<inner-expression> ::= <enclosed-expression>
                     | <struct-initialization-expression>
                     | <builtin-function-call-expression>
                     | <literal-int-expression>
                     | <literal-float-expression>
                     | <literal-string-expression>
                     | <variable-reference>

<enclosed-expression> ::= "(" <expression> ")"

<struct-initialization-expression> ::= "{" <ws> <struct-initialization-list>? "}"

<struct-initialization-list> ::= <struct-initialization-entry> <ws>
                                 ( "," <ws> <struct-initialization-entry> <ws> )* ( "," <ws> )?

<struct-initialization-entry> ::= <variable-name> <ws> "=" <ws> <expression>



<builtin-function-call-expression> ::= "@" <function-reference> <ws> "(" <ws> <function-argument-list>? ")"

<function-reference> ::= <variable-reference>

<function-argument-list> ::= ( <function-argument> <ws> "," )* <function-argument> (<ws> "," )? <ws>

<function-argument> ::= <expression>



<literal-int-expression> ::= "-"? <numerical>+
                           | "0b" <binary-or-underscore>+
                           | "0x" <hexadecimal-or-underscore>+
                           | "'" <char-char> "'"

<literal-float-expression> ::= "-"? <numerical>+ "." <numerical>+
                             | "-"? "0" "." <numerical>+ "E" "-"? <numerical>+
                             | "-"? "0b" <binary-or-underscore>+ "E" "-"? <binary-or-underscore>+
                             | "-"? "0x" <hexadecimal-or-underscore>+ "E" "-"? <hexadecimal-or-underscore>+

<literal-string-expression> ::= "\"" <string-char>* "\""



<visibility-specifier> ::= ("public" <fws>)?

<variable-declaration> ::= <mutability-specifier> <variable-name> <fws>
                           ":" <ws> <type-reference> <fws>
                           "=" <ws> <variable-declaration-rhs>

<variable-declaration-rhs> ::= "undefined"
                             | <expression>

<mutability-specifier> ::= ("mut" <fws>)?

<variable-reference> ::= <global-identifier-path>
                       | <variable-name> ( "." <variable-name> )*

<variable-name> ::= <identifier>



<type-name> ::= <identifier>

<type-reference> ::= <prefix-type-reference>

<prefix-type-reference> ::= <global-identifier-path>
                          | "&" <ws> <prefix-type-reference>



<global-identifier-path> ::= "root" ( "." <identifier> )+

<identifier-path> ::= <identifier> ( "." <identifier> )*

<identifier> ::= <identifier-initial-char> <identifier-char>*

<identifier-initial-char> ::= <alphabetical> | "_"

<identifier-char> ::= <alphabetical> | <numerical> | "_"



<char-char> ::= "\"" | "\\'" <escaped-char> | <non-escaped-char>

<string-char> ::= "\\\"" | "'" | <escaped-char> | <non-escaped-char>



// ws = whitespace
<ws> ::= <whitespace-char>*

// fws = force whitespace
<fws> ::= <whitespace-char>+

<whitespace-char> ::= " " | "\t" | <newline-char>

<newline-char> ::= "\r\n" | "\n" | "\r"

// all characters in 0x20-0x7e plus \t (horizontal tab)
<non-newline-char> ::= <non-escaped-char> | "\"" | "'"

<escaped-char> ::= "\\\\" | "\\n" | "\\r" | "\\t" | "\\b" | "\\f" | "\\v" | "\\0" | "\\x" <hexadecimal> <hexadecimal>

<non-escaped-char> ::= "\t"
                     | " " | "!" |       "#" | "$" | "%" | "&" |       "(" | ")" | "*" | "+" | "," | "-" | "." | "/"
                     | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | ":" | ";" | "<" | "=" | ">" | "?"
                     | "@" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O"
                     | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "[" | "\\" | "]" | "^" | "_"
                     | "`" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o"
                     | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "{" | "|" | "}" | "~"



<alphabetical> ::= <lower-case-alphabetical> | <upper-case-alphabetical>

<upper-case-alphabetical> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
                            | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
                            | "U" | "V" | "W" | "X" | "Y" | "Z"

<lower-case-alphabetical> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
                            | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
                            | "u" | "v" | "w" | "x" | "y" | "z"

<numerical> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<binary-or-underscore> ::= <binary> | "_"

<binary> ::= "0" | "1"

<hexadecimal-or-underscore> ::= <hexadecimal> | "_"

<hexadecimal> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
                | "a" | "b" | "c" | "d" | "e" | "f"
                | "A" | "B" | "C" | "D" | "E" | "F"
